AWSTemplateFormatVersion: "2010-09-09"
Description: "Serverless AllTheThings - Branch"

Parameters:
  BranchSlug:
    AllowedPattern: "^(master|develop|release-[a-z0-9-]{1,51}|feature-[a-z0-9-]{1,51})$(?<!-)"
    ConstraintDescription: "BranchSlug must be a valid git branch slug. Allowed pattern: ^(master|develop|release-[a-z0-9-]{1,51}|feature-[a-z0-9-]{1,51})$(?<!-)"
    Description: "The git branch slug, e.g. master"
    Type: "String"
  Subdomain:
    AllowedPattern: "^(www|www-develop|www-release-[a-z0-9-]{1,51}|www-feature-[a-z0-9-]{1,51})$(?<!-)"
    ConstraintDescription: "Subdomain must be a valid subdomain. Allowed pattern: ^(www|www-develop|www-release-[a-z0-9-]{1,51}|www-feature-[a-z0-9-]{1,51})$(?<!-)"
    Description: "The subdomain, e.g. www"
    Type: "String"
  Commit:
    AllowedPattern: "^[a-z0-9-]{40}$"
    ConstraintDescription: "Commit must be a valid git commit SHA. Allowed pattern: ^[a-z0-9-]{40}$"
    Description: "The git commit SHA, e.g. abcdefghijklmnopqrstuvwxyz0123456789abcd"
    Type: "String"
  DatabaseClusterIdentifier:
    AllowedPattern: "(?=[a-zA-Z])(?!^.*\\-\\-.*$)^[a-zA-Z0-9-]{1,63}$"
    ConstraintDescription: "DatabaseClusterIdentifier must be a valid database cluster identifier. Allowed pattern: (?=[a-zA-Z])(?!^.*\\-\\-.*$)^[a-zA-Z0-9-]{1,63}$"
    Default: "serverless-allthethings"
    Description: "The database cluster identifier, e.g. serverless-allthethings"
    Type: "String"
  DatabaseName:
    AllowedPattern: "(?=[a-zA-Z])^[a-zA-Z0-9_]{1,64}$"
    ConstraintDescription: "DatabaseName must be a valid database name. Allowed pattern: (?=[a-zA-Z])^[a-zA-Z0-9_]{1,64}$"
    Default: "serverless_allthethings"
    Description: "The database name, e.g. serverless_allthethings"
    Type: "String"
  DatabaseMasterUsername:
    AllowedPattern: "(?=^.{1,16}$)^[a-zA-Z]+[0-9a-zA-Z_]*$"
    ConstraintDescription: "DatabaseMasterUsername must be a valid database master username. Allowed pattern: (?=^.{1,16}$)^[a-zA-Z]+[0-9a-zA-Z_]*$"
    Default: "root"
    Description: "The database master username, e.g. root"
    Type: "String"
  SecretsManagerSecretName:
    AllowedPattern: "(?=^.{1,256}$)(?!^.*\\/\\/.*$)^(\\/[a-zA-Z0-9_+=.@-]+)+$(?<!\\/)"
    ConstraintDescription: "SecretsManagerSecretName must be a valid secrets manager secret name. Allowed pattern: (?=^.{1,256}$)(?!^.*\\/\\/.*$)^(\\/[a-zA-Z0-9_+=.@-]+)+$(?<!\\/)"
    Default: "/serverless-allthethings/rds"
    Description: "The secrets manager secret name, e.g. /serverless-allthethings/rds"
    Type: "String"

Conditions:
  IsMasterBranch: !Equals [ !Ref "Subdomain", "www" ]

Resources:
  # IAM Roles
  IamRoleLambdaApp:
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
      Path: "/"
    Type: "AWS::IAM::Role"
  IamRoleLambdaViewerRequest:
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
      Path: "/"
    Type: "AWS::IAM::Role"
  IamRoleAppSyncDataSource:
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "appsync.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      Path: "/"
    Type: "AWS::IAM::Role"
  IamRoleLambdaCustomEnableHttpEndpoint:
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      Path: "/"
    Type: "AWS::IAM::Role"
  # Lambda
  LambdaFunctionApp:
    DependsOn:
      - "IamRoleLambdaApp"
    Properties:
      Code:
        S3Bucket: !ImportValue "ServerlessAllTheThingsS3BucketArtifactsName"
        S3Key: !Sub "${Commit}/app/lambda.zip"
      Description: !Sub "${AWS::StackName}-app"
      FunctionName: !Sub "${AWS::StackName}-app"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "IamRoleLambdaApp.Arn"
      Runtime: "nodejs8.10"
      Timeout: 20
    Type: "AWS::Lambda::Function"
  LambdaFunctionViewerRequest:
    DependsOn:
      - "IamRoleLambdaViewerRequest"
    Properties:
      Code:
        S3Bucket: !ImportValue "ServerlessAllTheThingsS3BucketArtifactsName"
        S3Key: !Sub "${Commit}/viewer-request/lambda.zip"
      Description: !Sub "${AWS::StackName}-viewer-request"
      FunctionName: !Sub "${AWS::StackName}-viewer-request"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "IamRoleLambdaViewerRequest.Arn"
      Runtime: "nodejs8.10"
      Timeout: 5
    Type: "AWS::Lambda::Function"
  LambdaFunctionCustomEnableHttpEndpoint:
    DependsOn:
      - "IamRoleLambdaCustomEnableHttpEndpoint"
    Properties:
      Code:
        S3Bucket: !ImportValue "ServerlessAllTheThingsS3BucketArtifactsName"
        S3Key: !Sub "${Commit}/custom-rds/lambda.zip"
      Description: "serverless-allthethings | RDS Custom Resource"
      Handler: "index.handler"
      Role: !GetAtt "IamRoleLambdaCustomEnableHttpEndpoint.Arn"
      MemorySize: 128
      Runtime: "nodejs8.10"
      Timeout: 5
    Type: "AWS::Lambda::Function"
  LambdaVersionApp:
    DependsOn:
      - "LambdaFunctionApp"
    Properties:
      FunctionName: !Ref "LambdaFunctionApp"
    Type: "AWS::Lambda::Version"
  LambdaVersionViewerRequest:
    DependsOn:
      - "LambdaFunctionViewerRequest"
    Properties:
      FunctionName: !Ref "LambdaFunctionViewerRequest"
    Type: "AWS::Lambda::Version"
  LambdaVersionCustomEnableHttpEndpoint:
    DependsOn:
      - "LambdaFunctionCustomEnableHttpEndpoint"
    Properties:
      FunctionName: !Ref "LambdaFunctionCustomEnableHttpEndpoint"
    Type: "AWS::Lambda::Version"
  # CloudFront
  CloudFrontDistribution:
    DependsOn:
      - "LambdaVersionApp"
      - "LambdaVersionViewerRequest"
    Properties:
      DistributionConfig:
        Comment: !Ref "AWS::StackName"
        DefaultCacheBehavior:
          AllowedMethods:
            - "GET"
            - "HEAD"
            - "OPTIONS"
          CachedMethods:
            - "GET"
            - "HEAD"
            - "OPTIONS"
          Compress: false
          DefaultTTL: 31536000
          ForwardedValues:
            Headers:
              - "x-accept-encoding"
            QueryString: false
          LambdaFunctionAssociations:
            - EventType: "viewer-request"
              LambdaFunctionARN: !Ref "LambdaVersionViewerRequest"
            - EventType: "origin-request"
              LambdaFunctionARN: !Ref "LambdaVersionApp"
            - EventType: "origin-response"
              LambdaFunctionARN: !Ref "LambdaVersionApp"
          MaxTTL: 31536000
          MinTTL: 0
          SmoothStreaming: false
          TargetOriginId: !Join [
            "",
            [
              "s3:",
              !ImportValue "ServerlessAllTheThingsS3BucketStaticName",
            ],
          ]
          ViewerProtocolPolicy: "redirect-to-https"
        Enabled: true
        HttpVersion: "http2"
        IPV6Enabled: false
        Origins:
          - DomainName: !ImportValue "ServerlessAllTheThingsS3BucketStaticDomainName"
            Id: !Join [
              "",
              [
                "s3:",
                !ImportValue "ServerlessAllTheThingsS3BucketStaticName",
              ],
            ]
            OriginPath: !Sub "/${BranchSlug}"
            S3OriginConfig:
              OriginAccessIdentity:
                !Join [
                  "",
                  [
                    "origin-access-identity/cloudfront/",
                    !ImportValue "ServerlessAllTheThingsCloudFrontCloudFrontOriginAccessIdentityId",
                  ],
                ]
        PriceClass: "PriceClass_All"
    Type: "AWS::CloudFront::Distribution"
  # Cognito
  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
  CognitoUserPoolClient:
    DependsOn:
      - "CognitoUserPool"
    Properties:
      UserPoolId: !Ref "CognitoUserPool"
    Type: "AWS::Cognito::UserPoolClient"
  # Secrets Manager
  SecretsManagerSecret:
    Properties:
      Name: !Ref "SecretsManagerSecretName"
      GenerateSecretString:
        ExcludeCharacters: '"@/\'
        GenerateStringKey: "password"
        PasswordLength: 16
        SecretStringTemplate: !Join ["", ['{"username": "', !Ref "DatabaseMasterUsername", '"}']]
    Type: "AWS::SecretsManager::Secret"
  SecretsManagerSecretTargetAttachment:
    DependsOn:
      - "RdsDbCluster"
      - "SecretsManagerSecret"
    Properties:
      SecretId: !Ref "SecretsManagerSecret"
      TargetId: !Ref "RdsDbCluster"
      TargetType: "AWS::RDS::DBCluster"
    Type: "AWS::SecretsManager::SecretTargetAttachment"
  # VPC
  Ec2Vpc:
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
    Type: "AWS::EC2::VPC"
  Ec2SubnetA:
    DependsOn:
      - "Ec2Vpc"
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref "Ec2Vpc"
    Type: "AWS::EC2::Subnet"
  Ec2SubnetB:
    DependsOn:
      - "Ec2Vpc"
    Properties:
      AvailabilityZone: "us-east-1b"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref "Ec2Vpc"
    Type: "AWS::EC2::Subnet"
  # RDS
  RdsDbSubnetGroup:
    DependsOn:
      - "Ec2SubnetA"
      - "Ec2SubnetB"
    Properties:
      DBSubnetGroupDescription: !Ref "AWS::StackName"
      SubnetIds:
        - !Ref "Ec2SubnetA"
        - !Ref "Ec2SubnetB"
    Type: "AWS::RDS::DBSubnetGroup"
  RdsDbCluster:
    DependsOn:
      - "Ec2Vpc"
      - "SecretsManagerSecret"
    Properties:
      DatabaseName: !Ref "DatabaseName"
      DBClusterIdentifier: !Ref "DatabaseClusterIdentifier"
      DBSubnetGroupName: !Ref "RdsDbSubnetGroup"
      DeletionProtection: !If ["IsMasterBranch", true, false]
      Engine: "aurora"
      EngineMode: "serverless"
      EngineVersion: "5.6"
      MasterUsername: !Join ["", ["{{resolve:secretsmanager:", !Ref "SecretsManagerSecret", ":SecretString:username}}" ]]
      MasterUserPassword: !Join ["", ["{{resolve:secretsmanager:", !Ref "SecretsManagerSecret", ":SecretString:password}}" ]]
      VpcSecurityGroupIds:
        - !GetAtt "Ec2Vpc.DefaultSecurityGroup"
    Type: "AWS::RDS::DBCluster"
  # Custom
  CustomEnableEnableHttpEndpoint:
    DependsOn:
      - "LambdaFunctionCustomEnableHttpEndpoint"
      - "RdsDbCluster"
    Properties:
      DBClusterIdentifier: !Ref "RdsDbCluster"
      ServiceToken: !GetAtt "LambdaFunctionCustomEnableHttpEndpoint.Arn"
    Type: "Custom::EnableHttpEndpoint"
  # AppSync
  AppSyncGraphQlApi:
    DependsOn:
      - "CognitoUserPool"
    Properties:
      AuthenticationType: "AMAZON_COGNITO_USER_POOLS"
      Name:  !Sub "serverless-allthethings-${BranchSlug}"
      UserPoolConfig:
        UserPoolId: !Ref "CognitoUserPool"
        AwsRegion: !Sub "${AWS::Region}"
        DefaultAction: "DENY"
    Type: "AWS::AppSync::GraphQLApi"
  AppSyncDataSource:
    DependsOn:
      - "AppSyncGraphQlApi"
      - "RdsDbCluster"
      - "IamRoleAppSyncDataSource"
    Properties:
      ApiId: !GetAtt "AppSyncGraphQlApi.ApiId"
      RelationalDatabaseConfig:
        RdsHttpEndpointConfig:
          AwsRegion: !Sub "${AWS::Region}"
          AwsSecretStoreArn: !Ref "SecretsManagerSecret"
          DatabaseName: !Ref "DatabaseName"
          DbClusterIdentifier: !Ref "DatabaseClusterIdentifier"
        RelationalDatabaseSourceType: "RDS_HTTP_ENDPOINT"
      Name: !Sub "serverlessallthethings_${BranchSlug}"
      ServiceRoleArn: !GetAtt "IamRoleAppSyncDataSource.Arn"
      Type: "RELATIONAL_DATABASE"
    Type: "AWS::AppSync::DataSource"
  AppSyncGraphQlSchema:
    DependsOn:
      - "AppSyncGraphQlApi"
    Properties:
      ApiId: !GetAtt "AppSyncGraphQlApi.ApiId"
      Definition: |
        type Article {
          id: Int!
          title: String!
          content: String!
        }

        type Success {
          success: Boolean!
        }

        type Mutation {
          deleteArticle(id: Int!): Success
          @aws_auth(cognito_groups: ["admin"])
          patchArticle(id: Int!, title: String!, content: String!): Article
          @aws_auth(cognito_groups: ["admin"])
          putArticle(title: String!, content: String!): Article
          @aws_auth(cognito_groups: ["admin"])
        }

        type Query {
          getArticle(id: Int!): Article
          @aws_auth(cognito_groups: ["viewer"])
          getArticles(offset: Int, limit: Int): [Article]
          @aws_auth(cognito_groups: ["viewer"])
        }

        schema {
          query: Query
          mutation: Mutation
        }
    Type: "AWS::AppSync::GraphQLSchema"
  AppSyncResolverDeleteArticle:
    DependsOn:
      - "AppSyncDataSource"
      - "AppSyncGraphQlApi"
      - "AppSyncGraphQlSchema"
    Properties:
      ApiId: !GetAtt "AppSyncGraphQlApi.ApiId"
      DataSourceName: !GetAtt "AppSyncDataSource.Name"
      FieldName: "deleteArticle"
      RequestMappingTemplate: |
        #set ($validId = $util.isNumber($ctx.args.id) && $ctx.args.id > 0)
        #if (!$validId)
          $util.error("Provided id input is not valid.", "ValidationError")
        #end
        {
          "statements" : [
            "CALL delete_article(:ID);"
          ],
          "variableMap": {
            ":ID": $util.toJson($ctx.args.id)
          },
          "version" : "2018-05-29"
        }
      ResponseMappingTemplate: |
        #if (!$util.isNull($ctx.error))
          $utils.error($ctx.error.message, $ctx.error.type, $ctx.error.data, $ctx.error.info)
        #else
          {
            "success": true
          }
        #end
      TypeName: "Mutation"
    Type: "AWS::AppSync::Resolver"
  AppSyncResolverGetArticle:
    DependsOn:
      - "AppSyncDataSource"
      - "AppSyncGraphQlApi"
      - "AppSyncGraphQlSchema"
    Properties:
      ApiId: !GetAtt "AppSyncGraphQlApi.ApiId"
      DataSourceName: !GetAtt "AppSyncDataSource.Name"
      FieldName: "getArticle"
      RequestMappingTemplate: |
        #set ($validId = $util.isNumber($ctx.args.id) && $ctx.args.id > 0)
        #if (!$validId)
          $util.error("Provided id input is not valid.", "ValidationError")
        #end
        {
          "statements" : [
            "CALL get_article(:ID);"
          ],
          "variableMap": {
            ":ID": $util.toJson($ctx.args.id)
          },
          "version" : "2018-05-29"
        }
      ResponseMappingTemplate: |
        #if (!$util.isNull($ctx.error))
          $utils.error($ctx.error.message, $ctx.error.type, $ctx.error.data, $ctx.error.info)
        #else
          $util.toJson($util.rds.toJsonObject($ctx.result)[0][0])
        #end
      TypeName: "Query"
    Type: "AWS::AppSync::Resolver"
  AppSyncResolverGetArticles:
    DependsOn:
      - "AppSyncDataSource"
      - "AppSyncGraphQlApi"
      - "AppSyncGraphQlSchema"
    Properties:
      ApiId: !GetAtt "AppSyncGraphQlApi.ApiId"
      DataSourceName: !GetAtt "AppSyncDataSource.Name"
      FieldName: "getArticles"
      RequestMappingTemplate: |
        #set ($offset = $util.defaultIfNull($ctx.arguments.offset, 0))
        #set ($validOffset = $util.isNumber($offset) && $offset >= 0)
        #if (!$validOffset)
          $util.error("Provided offset input is not valid.", "ValidationError")
        #end
        #set ($limit = $util.defaultIfNull($ctx.arguments.limit, 20))
        #set ($validLimit = $util.isNumber($limit) && $limit >= 1 && $limit <= 20)
        #if (!$validLimit)
          $util.error("Provided limit input is not valid.", "ValidationError")
        #end
        {
          "statements" : [
            "CALL get_articles(:OFFSET, :LIMIT);"
          ],
          "variableMap": {
            ":OFFSET": $util.toJson($offset),
            ":LIMIT": $util.toJson($limit)
          },
          "version" : "2018-05-29"
        }
      ResponseMappingTemplate: |
        #if (!$util.isNull($ctx.error))
          $utils.error($ctx.error.message, $ctx.error.type, $ctx.error.data, $ctx.error.info)
        #else
          $util.toJson($util.rds.toJsonObject($ctx.result)[0])
        #end
      TypeName: "Query"
    Type: "AWS::AppSync::Resolver"
  AppSyncResolverPatchArticle:
    DependsOn:
      - "AppSyncDataSource"
      - "AppSyncGraphQlApi"
      - "AppSyncGraphQlSchema"
    Properties:
      ApiId: !GetAtt "AppSyncGraphQlApi.ApiId"
      DataSourceName: !GetAtt "AppSyncDataSource.Name"
      FieldName: "patchArticle"
      RequestMappingTemplate: |
        #set ($validId = $util.isNumber($ctx.args.id) && $ctx.args.id > 0)
        #if (!$validId)
          $util.error("Provided id input is not valid.", "ValidationError")
        #end
        #set ($validTitle = $util.isString($ctx.args.title) && !$util.isNullOrBlank($ctx.args.title))
        #if (!$validTitle)
          $util.error("Provided title input is not valid.", "ValidationError")
        #end
        #set ($validContent= $util.isString($ctx.args.content) && !$util.isNullOrBlank($ctx.args.content))
        #if (!$validContent)
          $util.error("Provided content input is not valid.", "ValidationError")
        #end
        {
          "statements" : [
            "CALL patch_article(:ID, :TITLE, :CONTENT);"
          ],
          "variableMap": {
            ":ID": $util.toJson($ctx.args.id),
            ":TITLE": $util.toJson($ctx.args.title.replaceAll("'", "''").replaceAll("\\", "\\\\")),
            ":CONTENT": $util.toJson($ctx.args.content.replaceAll("'", "''").replaceAll("\\", "\\\\"))
          },
          "version" : "2018-05-29"
        }
      ResponseMappingTemplate: |
        #if (!$util.isNull($ctx.error))
          $utils.error($ctx.error.message, $ctx.error.type, $ctx.error.data, $ctx.error.info)
        #else
          $util.toJson($util.rds.toJsonObject($ctx.result)[0][0])
        #end
      TypeName: "Mutation"
    Type: "AWS::AppSync::Resolver"
  AppSyncResolverPutArticle:
    DependsOn:
      - "AppSyncDataSource"
      - "AppSyncGraphQlApi"
      - "AppSyncGraphQlSchema"
    Properties:
      ApiId: !GetAtt "AppSyncGraphQlApi.ApiId"
      DataSourceName: !GetAtt "AppSyncDataSource.Name"
      FieldName: "putArticle"
      RequestMappingTemplate: |
        #set ($validTitle = $util.isString($ctx.args.title) && !$util.isNullOrBlank($ctx.args.title))
        #if (!$validTitle)
          $util.error("Provided title input is not valid.", "ValidationError")
        #end
        #set ($validContent= $util.isString($ctx.args.content) && !$util.isNullOrBlank($ctx.args.content))
        #if (!$validContent)
          $util.error("Provided content input is not valid.", "ValidationError")
        #end
        {
          "statements" : [
            "CALL put_article(:TITLE, :CONTENT);"
          ],
          "variableMap": {
            ":TITLE": $util.toJson($ctx.args.title.replaceAll("'", "''").replaceAll("\\", "\\\\")),
            ":CONTENT": $util.toJson($ctx.args.content.replaceAll("'", "''").replaceAll("\\", "\\\\"))
          },
          "version" : "2018-05-29"
        }
      ResponseMappingTemplate: |
        #if (!$util.isNull($ctx.error))
          $utils.error($ctx.error.message, $ctx.error.type, $ctx.error.data, $ctx.error.info)
        #else
          $util.toJson($util.rds.toJsonObject($ctx.result)[0][0])
        #end
      TypeName: "Mutation"
    Type: "AWS::AppSync::Resolver"
